version: '3.9'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: spring-boot-app
    container_name: spring-boot-app
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
      - elasticsearch
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/mydatabase
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
      - REDIS_HOST=redis
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  db:
    image: mysql:latest
    container_name: mysql-db
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=mydatabase
      - MYSQL_USER=root
      - MYSQL_PASSWORD=password
    volumes:
      - db_data:/var/lib/mysql

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data

volumes:
  db_data:
  es_data:
This Docker Compose file defines four services:





app: The Spring Boot application container, which depends on the db, redis, and elasticsearch container
s. It sets environment variables for the database connection, Redis host, and Elasticsearch hosts.

db: The MySQL database container, which exposes port 3306 and sets environment variables for the root
password, database name, and credentials.

redis: The Redis container, which exposes port 6379.

elasticsearch: The Elasticsearch container, which exposes port 9200 and sets environment variables for
 single-node discovery and Java memory settings. It also mounts a volume for Elasticsearch data.

The volumes section defines two named volumes for persisting MySQL and Elasticsearch data.

Note that you may need to adjust the configuration of each service according to your specific needs,
such as the version of the software or the container names.

A network is a collection of devices that are connected together to enable communication and data sharing between them. The devices can include computers, servers, routers, switches, and other networking hardware.

There are different types of networks, including:

Local Area Network (LAN): A LAN is a network that connects devices within a limited geographical area, such as a home, office, or school. LANs can be wired or wireless, and they typically use Ethernet cables or Wi-Fi to connect devices.

Wide Area Network (WAN): A WAN is a network that covers a large geographical area, such as a city, country, or even the entire world. WANs use telecommunication technologies, such as leased lines, satellite links, and internet connections to connect devices.

Metropolitan Area Network (MAN): A MAN is a network that covers a larger area than a LAN but smaller than a WAN. It is typically used to connect multiple LANs within a city or town.

Personal Area Network (PAN): A PAN is a network that connects devices that are located in close proximity to each other, such as a computer and a smartphone. Bluetooth and infrared technologies are commonly used to create PANs.

Networks can also be categorized by their topology, which refers to the physical layout of the devices and the way they are connected. Common topologies include bus, star, ring, and mesh.

Networks play a vital role in enabling communication, collaboration, and data sharing between devices and users. They are used in a wide range of applications, including business, education, healthcare, entertainment, and more.


The OSI (Open Systems Interconnection) model is a conceptual model that describes the communication process between two devices in a network. It divides the communication process into seven layers, each with its own set of protocols, functions, and services. The layers are:

Physical Layer: This layer deals with the physical connection between devices and includes the cabling, connectors, and other hardware components.

Data Link Layer: This layer is responsible for transferring data between devices on the same network. It also handles error detection and correction.

Network Layer: This layer is responsible for routing data between different networks. It determines the best path for data to travel based on network conditions and other factors.

Transport Layer: This layer ensures that data is transmitted reliably and efficiently. It handles issues such as flow control, error recovery, and congestion control.

Session Layer: This layer establishes and manages communication sessions between devices. It also handles issues such as session termination and synchronization.

Presentation Layer: This layer handles data formatting and presentation issues such as data compression, encryption, and decryption.

Application Layer: This layer provides services and interfaces to application programs. It includes protocols such as HTTP, FTP, SMTP, and others that enable applications to communicate over a network.

The OSI model provides a framework for understanding how communication works between devices in a network. Each layer builds upon the layer below it, and each layer is responsible for a specific set of functions and services. By breaking down the communication process into distinct layers, the OSI model makes it easier to troubleshoot network problems and develop new protocols and technologies.









output {
    elasticsearch {
        hosts => ["localhost:9200"]
        index => "logstash-%{+YYYY.MM.dd}"
    }
    stdout {
        codec => rubydebug
    }
}
filter {
    json {
        source => "message"
    }
    mutate {
        add_field => { "app" => "spring_boot_elk" }
    }
}

-----------------------------------------------
filter {
  mutate {
    add_field => { "app" => "spring_boot_elk" }
  }
}


output {
  elasticsearch {
    hosts => "192.168.0.253:9200"
    index => "springboot-%{[app]}"
  }
}

